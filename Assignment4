************************************************************************************************************


A Vending Machine 


Consumer can :
		1. insert money
		2. select item
		3. Get the Item
	

VendingMachine can :
			1. Count money & verify
			2. vend out the item
			3. Issue a receipt 

Class : Consumer 
Attributes : ConsumerID, itemSelected, moneyInserted ;

Method1 : 
		SelectItem(itemSelected)
		{
			itemSelected=selected one item from VendingMachine.itemsList[];
			float Price = VendingMachine.generateTotalPrice();

		}

Method2 : 
		InsertMoney()
		{
			VendingMachine.MoneyDenom(money);
			float penny=0.1f, nickel=0.5f, dime=0.10f, quarter=0.25f ;
			while(moneyInserted == penny || moneyInserted == nickel || moneyInserted == dime || moneyInserted == quarter)
			{
				VendingMAchine.Verify(moneyInserted);
			}
		}

Method3 :
		GetItem(ConsumerID, itemSelected)
		{
			
			VendingMachine.ItemOut(itemSelected, ConsumerID);
		}
———————————————————————————————————————————

Class : VendingMachine
Attributes : itemsList[], priceListCorrespondingToItems[], Amt;


Method1:
		generateTotalPrice(itemSelected,)
		{
			float tax=0.15f;
			float price=itemSelected.priceListCorrespondingToItems[];
			Amt=price * tax;
			generate orderNo;
		}


Method2 :
		boolean Verify(moneyInserted)
		{
			validate the money inserted for the price of item
			return true if valid;		
			else
			return false ;
		}


Method3 :
		
		boolean ItemOut(ItemSelected,ConsumerID)
		{
			if (VendingMachine.Verify())
			{
				print “ Please collect your item”
				return true;
			}
			else
				print “ Something went wrong, Try again”
				return false;
		}


Method4 :

		generateReciept(ConsumerID, ItemSelected,price)
		{
			if (itemOut())
			{
				int billID = generate a ID for bill along with receipt
				Print receipt
			}
		}
